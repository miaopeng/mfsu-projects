export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded date */
  ISO8601Date: any;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
  /** Represents untyped JSON */
  JSON: any;
  Upload: any;
};

export type Account = {
  __typename?: 'Account';
  annualMandate: Scalars['Float'];
  availableBalance: Scalars['Float'];
  balance: Scalars['Float'];
  blockedBalance: Scalars['Float'];
  id: Scalars['ID'];
  rebate: Scalars['Float'];
};

export type AccountInput = {
  /** Required for creating a new account. */
  annualMandate?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['ID']>;
  /** Required for creating a new account. */
  rebate?: Maybe<Scalars['Float']>;
};

export type Activity = {
  __typename?: 'Activity';
  conditions?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  description?: Maybe<Scalars['String']>;
  endAt: Scalars['ISO8601DateTime'];
  gift?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  needPurchased: Scalars['Boolean'];
  needSubcribed: Scalars['Boolean'];
  slTable: SlTable;
  startAt: Scalars['ISO8601DateTime'];
  updatedAt: Scalars['ISO8601DateTime'];
  user: User;
};

/** Autogenerated return type of ActivityCreate */
export type ActivityCreatePayload = {
  __typename?: 'ActivityCreatePayload';
  activity?: Maybe<Activity>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
};

export type ActivityInput = {
  conditions?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  endAt?: Maybe<Scalars['ISO8601DateTime']>;
  /** [{"variant_id": 1, "quantity": 1}] */
  gift?: Maybe<Scalars['JSON']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  needPurchased?: Maybe<Scalars['Boolean']>;
  needSubcribed?: Maybe<Scalars['Boolean']>;
  slTable?: Maybe<SlTableInput>;
  startAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** Autogenerated return type of ActivityUpdate */
export type ActivityUpdatePayload = {
  __typename?: 'ActivityUpdatePayload';
  activity?: Maybe<Activity>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
};

export type Address = {
  __typename?: 'Address';
  city: Scalars['String'];
  detail: Scalars['String'];
  district?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  province: Scalars['String'];
};

/** Attributes for address */
export type AddressInput = {
  city?: Maybe<Scalars['String']>;
  detail?: Maybe<Scalars['String']>;
  district?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  province?: Maybe<Scalars['String']>;
};

export type Advertiser = {
  __typename?: 'Advertiser';
  advertiserReports: Array<AdvertiserReport>;
  agent: Scalars['String'];
  id: Scalars['ID'];
  name: Scalars['String'];
};


export type AdvertiserAdvertiserReportsArgs = {
  endDate: Scalars['String'];
  startDate: Scalars['String'];
  timeGranularity?: Maybe<TimeGranularity>;
};

export type AdvertiserReport = {
  __typename?: 'AdvertiserReport';
  /** 投放渠道 */
  channel: Scalars['String'];
  /** 展现数据-点击数 */
  clickCount: Scalars['Int'];
  /** 展现数据-总花费 */
  cost: Scalars['Float'];
  /** 展现数据-点击率 */
  ctr: Scalars['Float'];
  /** 数据起始时间 */
  date: Scalars['String'];
  /** 展现数据-总成交 */
  paidAmount: Scalars['Float'];
  /** 展现数据-ROI */
  roi: Scalars['Float'];
  /** 展现数据-展示数 */
  showCount: Scalars['Int'];
};

/** 广告投放渠道 */
export enum AdvertiserReportChannel {
  /** AD */
  Ad = 'ad',
  /** 千川 */
  Qc = 'qc',
  /** UD */
  Ud = 'ud'
}

export type AdvertiserReportPage = {
  __typename?: 'AdvertiserReportPage';
  hasNextPage: Scalars['Boolean'];
  hasPreviousPage: Scalars['Boolean'];
  nodes: Array<AdvertiserReport>;
  nodesCount: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

export type Agent = {
  __typename?: 'Agent';
  advertiserReports: Array<AdvertiserReport>;
  id: Scalars['ID'];
  name: Scalars['String'];
};


export type AgentAdvertiserReportsArgs = {
  endDate: Scalars['String'];
  startDate: Scalars['String'];
  timeGranularity?: Maybe<TimeGranularity>;
};

export type Category = {
  __typename?: 'Category';
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  name: Scalars['String'];
  position?: Maybe<Scalars['Int']>;
  /** Find all products */
  products?: Maybe<Array<Product>>;
  updatedAt: Scalars['ISO8601DateTime'];
};


export type CategoryProductsArgs = {
  published?: Maybe<Scalars['Boolean']>;
  withCategory?: Maybe<Scalars['ID']>;
  withInventoryWarning?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated return type of CategoryCreate */
export type CategoryCreatePayload = {
  __typename?: 'CategoryCreatePayload';
  category?: Maybe<Category>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
};

export type CategoryInput = {
  id?: Maybe<Scalars['ID']>;
  /** Required for creating a new category. */
  name?: Maybe<Scalars['String']>;
  /** Required for creating a new category. */
  position?: Maybe<Scalars['Int']>;
};

/** Autogenerated return type of CategoryUpdate */
export type CategoryUpdatePayload = {
  __typename?: 'CategoryUpdatePayload';
  category?: Maybe<Category>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
};

export type Charge = {
  __typename?: 'Charge';
  amount: Scalars['Float'];
  attachments?: Maybe<Array<Scalars['String']>>;
  chargedAt: Scalars['ISO8601DateTime'];
  dealer: Dealer;
  id: Scalars['ID'];
  notes?: Maybe<Scalars['String']>;
  orders?: Maybe<Array<Order>>;
  /** pendding, approved */
  state: Scalars['String'];
};

/** Autogenerated return type of ChargeCreate */
export type ChargeCreatePayload = {
  __typename?: 'ChargeCreatePayload';
  charge?: Maybe<Charge>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
};

/** Attributes for charge. */
export type ChargeInput = {
  amount?: Maybe<Scalars['Float']>;
  /** Signed blob ID generated via `DirectUploadcreate` mutation */
  attachments?: Maybe<Array<Scalars['String']>>;
  chargedAt?: Maybe<Scalars['ISO8601DateTime']>;
  dealerId?: Maybe<Scalars['ID']>;
  id?: Maybe<Scalars['ID']>;
  notes?: Maybe<Scalars['String']>;
};

export type ChargePage = {
  __typename?: 'ChargePage';
  hasNextPage: Scalars['Boolean'];
  hasPreviousPage: Scalars['Boolean'];
  nodes: Array<Charge>;
  nodesCount: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

export type Dashboard = {
  __typename?: 'Dashboard';
  annualCharge: Scalars['Float'];
  annualExpense: Scalars['Float'];
  annualSales: Scalars['Float'];
  annualShopSales: Scalars['Float'];
  dailyAdCost: Scalars['JSON'];
  dailyAdSales: Scalars['JSON'];
  dailyOverview: Scalars['JSON'];
  dailyShopSales: Scalars['JSON'];
  dealerChargeBetween: Scalars['JSON'];
  dealerChargeRank: Scalars['JSON'];
  dealerReceivable: Scalars['JSON'];
  dealerSalesBetween: Scalars['JSON'];
  dealerSalesRank: Scalars['JSON'];
  dealersCount: Scalars['Float'];
  monthCharge: Scalars['Float'];
  monthSales: Scalars['Float'];
  monthShopSales: Scalars['Float'];
  monthlyAdCost: Scalars['JSON'];
  monthlyAdSales: Scalars['JSON'];
  monthlyCharge: Scalars['JSON'];
  monthlyExpense: Scalars['JSON'];
  monthlySales: Scalars['JSON'];
  monthlyShopSales: Scalars['JSON'];
  ordersCount: Scalars['Float'];
  quarterCharge: Scalars['Float'];
  quarterSales: Scalars['Float'];
  quarterShopSales: Scalars['Float'];
  salesChargeRankBetween: Scalars['JSON'];
  shopVariantSalesRank: Scalars['JSON'];
  totalBuyerCount: Scalars['Int'];
  totalCharge: Scalars['Float'];
  totalExpense: Scalars['Float'];
  totalReceivable: Scalars['Float'];
  totalSales: Scalars['Float'];
  totalShopSales: Scalars['Float'];
  variantSalesRank: Scalars['JSON'];
  weekCharge: Scalars['Float'];
  weekSales: Scalars['Float'];
  weekShopSales: Scalars['Float'];
  weeklyAdCost: Scalars['JSON'];
  weeklyAdSales: Scalars['JSON'];
  weeklyCharge: Scalars['JSON'];
  weeklySales: Scalars['JSON'];
  weeklyShopSales: Scalars['JSON'];
};


export type DashboardDailyOverviewArgs = {
  date: Scalars['ISO8601DateTime'];
};


export type DashboardDealerChargeBetweenArgs = {
  endTime: Scalars['ISO8601DateTime'];
  startTime: Scalars['ISO8601DateTime'];
};


export type DashboardDealerSalesBetweenArgs = {
  endTime: Scalars['ISO8601DateTime'];
  startTime: Scalars['ISO8601DateTime'];
};


export type DashboardSalesChargeRankBetweenArgs = {
  endTime: Scalars['ISO8601DateTime'];
  startTime: Scalars['ISO8601DateTime'];
};

export type Dealer = {
  __typename?: 'Dealer';
  account: Account;
  address: Address;
  allowableArrears: Scalars['Boolean'];
  annualCharge: Scalars['Float'];
  annualExpense: Scalars['Float'];
  annualProfit: Scalars['Float'];
  annualSales: Scalars['Float'];
  channel: Scalars['String'];
  charges: Array<Charge>;
  commissionRate?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  dealerType: Scalars['String'];
  expenses: Array<Expense>;
  id: Scalars['ID'];
  inventoryItems?: Maybe<Array<InventoryItem>>;
  level: Scalars['Int'];
  marketScope?: Maybe<Scalars['String']>;
  monthlyCommission: Scalars['JSON'];
  monthlyExpense: Scalars['JSON'];
  monthlyOrderCost: Scalars['JSON'];
  monthlySales: Scalars['JSON'];
  name: Scalars['String'];
  notes?: Maybe<Scalars['String']>;
  orders: Array<Order>;
  principal: Principal;
  shippingAddresses?: Maybe<Array<ShippingAddress>>;
  source?: Maybe<Scalars['String']>;
  terminals: Array<Terminal>;
  totalCharge: Scalars['Float'];
  totalExpense: Scalars['Float'];
  totalProfit: Scalars['Float'];
  totalSales: Scalars['Float'];
  user: User;
};

/** Autogenerated return type of DealerCreate */
export type DealerCreatePayload = {
  __typename?: 'DealerCreatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  dealer?: Maybe<Dealer>;
  errors?: Maybe<ValidationErrors>;
};

/** Specifies the input fields required to create or update a dealer. */
export type DealerInput = {
  /** The account associated with the dealer.  */
  account?: Maybe<AccountInput>;
  /** The address associated with the dealer.  */
  address?: Maybe<AddressInput>;
  allowableArrears?: Maybe<Scalars['Boolean']>;
  /** Required for creating a new dealer. */
  channel?: Maybe<Scalars['String']>;
  commissionRate?: Maybe<Scalars['Float']>;
  /** The type of dealer.  */
  dealerType?: DealerType;
  /** Specifies the dealer to update or create a new dealer if absent. */
  id?: Maybe<Scalars['ID']>;
  /** Required for creating a new dealer. */
  level?: Maybe<Scalars['Int']>;
  /** Required for creating a new dealer. */
  marketScope?: Maybe<Scalars['String']>;
  /** Required for creating a new dealer. */
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  /** The principal associated with the dealer. */
  principal?: Maybe<PrincipalInput>;
  source?: Maybe<Scalars['String']>;
  /** The user associated with the dealer. */
  userId?: Maybe<Scalars['Int']>;
};

/** 经销商类型 */
export enum DealerType {
  /** 观云 */
  Guanyun = 'guanyun',
  /** 元气 */
  Yuanqi = 'yuanqi'
}

/** Autogenerated return type of DealerUpdate */
export type DealerUpdatePayload = {
  __typename?: 'DealerUpdatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  dealer?: Maybe<Dealer>;
  errors?: Maybe<ValidationErrors>;
};

/** Represents direct upload credentials */
export type DirectUpload = {
  __typename?: 'DirectUpload';
  /** Created blob record ID */
  blobId: Scalars['ID'];
  /** HTTP request headers (JSON-encoded) */
  headers: Scalars['String'];
  /** Created blob key */
  key: Scalars['String'];
  /** Created blob record signed ID */
  signedBlobId: Scalars['ID'];
  /** Upload URL */
  url: Scalars['String'];
};

/** Autogenerated return type of DirectUploadCreate */
export type DirectUploadCreatePayload = {
  __typename?: 'DirectUploadCreatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  directUpload: DirectUpload;
};

/** File information required to prepare a direct upload */
export type DirectUploadInput = {
  /** File size (bytes) */
  byteSize: Scalars['Int'];
  /** MD5 file checksum as base64 */
  checksum: Scalars['String'];
  /** File content type */
  contentType: Scalars['String'];
  /** Original file name */
  filename: Scalars['String'];
};

export enum ExpensableEnum {
  Dealer = 'DEALER',
  Shop = 'SHOP'
}

/** Properties of Expense */
export type ExpensableType = Dealer | Shop;

export type Expense = {
  __typename?: 'Expense';
  amount: Scalars['Float'];
  attachments?: Maybe<Array<Scalars['String']>>;
  expensable: ExpensableType;
  expenseType: Scalars['String'];
  expensedAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  notes?: Maybe<Scalars['String']>;
  /** pendding, approved */
  state: Scalars['String'];
};

/** Autogenerated return type of ExpenseCreate */
export type ExpenseCreatePayload = {
  __typename?: 'ExpenseCreatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  expense?: Maybe<Expense>;
};

/** Attributes for expense. */
export type ExpenseInput = {
  amount?: Maybe<Scalars['Float']>;
  /** Signed blob ID generated via `DirectUploadcreate` mutation */
  attachments?: Maybe<Array<Scalars['String']>>;
  /** dealer_id or shop_id */
  expensableId?: Maybe<Scalars['ID']>;
  /** Dealer or Shop */
  expensableType?: Maybe<Scalars['ID']>;
  expenseType?: Maybe<Scalars['String']>;
  expensedAt?: Maybe<Scalars['ISO8601DateTime']>;
  id?: Maybe<Scalars['ID']>;
  notes?: Maybe<Scalars['String']>;
};

export type ExpensePage = {
  __typename?: 'ExpensePage';
  hasNextPage: Scalars['Boolean'];
  hasPreviousPage: Scalars['Boolean'];
  nodes: Array<Expense>;
  nodesCount: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

export type Hierarchy = {
  __typename?: 'Hierarchy';
  id: Scalars['ID'];
  parent: Variant;
  quantity: Scalars['Int'];
  variant: Variant;
};

/** Attributes for hierarchy. */
export type HierarchyInput = {
  _destroy?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  quantity?: Maybe<Scalars['Int']>;
  variantId?: Maybe<Scalars['ID']>;
};



export type InStore = {
  __typename?: 'InStore';
  id: Scalars['ID'];
  inStoreDate: Scalars['ISO8601DateTime'];
  inStoreItems: Array<InStoreItem>;
  inStoreType: InStoreType;
  notes?: Maybe<Scalars['String']>;
  outStoreId?: Maybe<Scalars['ID']>;
  /** pendding, completed */
  state: Scalars['String'];
  user: User;
};

/** Autogenerated input type of InStoreComplete */
export type InStoreCompleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
};

/** Autogenerated return type of InStoreComplete */
export type InStoreCompletePayload = {
  __typename?: 'InStoreCompletePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  inStore?: Maybe<InStore>;
};

/** Autogenerated return type of InStoreCreate */
export type InStoreCreatePayload = {
  __typename?: 'InStoreCreatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  inStore?: Maybe<InStore>;
};

export type InStoreInput = {
  id?: Maybe<Scalars['ID']>;
  inStoreDate?: Maybe<Scalars['ISO8601DateTime']>;
  inStoreItems?: Maybe<Array<InStoreItemInput>>;
  inStoreType?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  outStoreId?: Maybe<Scalars['ID']>;
};

export type InStoreItem = {
  __typename?: 'InStoreItem';
  id: Scalars['ID'];
  notes?: Maybe<Scalars['String']>;
  quantity: Scalars['Int'];
  unitCost: Scalars['Float'];
  variant: Variant;
};

export type InStoreItemInput = {
  _destroy?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  inStoreId?: Maybe<Scalars['ID']>;
  quantity?: Maybe<Scalars['Int']>;
  unitCost?: Maybe<Scalars['Float']>;
  variantId?: Maybe<Scalars['ID']>;
};

export type InStorePage = {
  __typename?: 'InStorePage';
  hasNextPage: Scalars['Boolean'];
  hasPreviousPage: Scalars['Boolean'];
  nodes: Array<InStore>;
  nodesCount: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** 入库类型 */
export enum InStoreType {
  /** 生产入库 */
  Production = 'production',
  /** 退货入库 */
  Returns = 'returns',
  /** 原材料入库 */
  Sourcing = 'sourcing'
}

/** Autogenerated return type of InStoreUpdate */
export type InStoreUpdatePayload = {
  __typename?: 'InStoreUpdatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  inStore?: Maybe<InStore>;
};

export enum InStoresOrder {
  Id = 'ID',
  Recent = 'RECENT'
}

export type InventoryCheck = {
  __typename?: 'InventoryCheck';
  checkDate: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  inventoryCheckItems: Array<InventoryCheckItem>;
  notes?: Maybe<Scalars['String']>;
  /** pendding, completed */
  state: Scalars['String'];
  user: User;
};

/** Autogenerated input type of InventoryCheckComplete */
export type InventoryCheckCompleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
};

/** Autogenerated return type of InventoryCheckComplete */
export type InventoryCheckCompletePayload = {
  __typename?: 'InventoryCheckCompletePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  inventoryCheck?: Maybe<InventoryCheck>;
};

/** Autogenerated return type of InventoryCheckCreate */
export type InventoryCheckCreatePayload = {
  __typename?: 'InventoryCheckCreatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  inventoryCheck?: Maybe<InventoryCheck>;
};

/** Autogenerated input type of InventoryCheckDelete */
export type InventoryCheckDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
};

/** Autogenerated return type of InventoryCheckDelete */
export type InventoryCheckDeletePayload = {
  __typename?: 'InventoryCheckDeletePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  inventoryCheck?: Maybe<InventoryCheck>;
};

export type InventoryCheckInput = {
  checkDate?: Maybe<Scalars['ISO8601DateTime']>;
  id?: Maybe<Scalars['ID']>;
  inventoryCheckItems?: Maybe<Array<InventoryCheckItemInput>>;
  notes?: Maybe<Scalars['String']>;
};

export type InventoryCheckItem = {
  __typename?: 'InventoryCheckItem';
  beginningQuantity: Scalars['Int'];
  endingQuantity: Scalars['Int'];
  id: Scalars['ID'];
  notes?: Maybe<Scalars['String']>;
  variant: Variant;
};

export type InventoryCheckItemInput = {
  _destroy?: Maybe<Scalars['Boolean']>;
  beginningQuantity?: Maybe<Scalars['Int']>;
  endingQuantity?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  inventoryCheckId?: Maybe<Scalars['ID']>;
  notes?: Maybe<Scalars['String']>;
  variantId?: Maybe<Scalars['ID']>;
};

export type InventoryCheckPage = {
  __typename?: 'InventoryCheckPage';
  hasNextPage: Scalars['Boolean'];
  hasPreviousPage: Scalars['Boolean'];
  nodes: Array<InventoryCheck>;
  nodesCount: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** Autogenerated return type of InventoryCheckUpdate */
export type InventoryCheckUpdatePayload = {
  __typename?: 'InventoryCheckUpdatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  inventoryCheck?: Maybe<InventoryCheck>;
};

export type InventoryItem = {
  __typename?: 'InventoryItem';
  createdAt: Scalars['ISO8601DateTime'];
  dealer?: Maybe<Dealer>;
  id: Scalars['ID'];
  quantity: Scalars['Int'];
  updatedAt: Scalars['ISO8601DateTime'];
  variant: Variant;
};

/** Autogenerated input type of InventoryItemUpdateQuantity */
export type InventoryItemUpdateQuantityInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  inventoryItemId: Scalars['ID'];
  quantity: Scalars['Int'];
};

/** Autogenerated return type of InventoryItemUpdateQuantity */
export type InventoryItemUpdateQuantityPayload = {
  __typename?: 'InventoryItemUpdateQuantityPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  inventoryItem?: Maybe<InventoryItem>;
};

export type InventoryLog = {
  __typename?: 'InventoryLog';
  adjustment: Scalars['Int'];
  causedById: Scalars['ID'];
  causedByType: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  endingQuantity: Scalars['Int'];
  id: Scalars['ID'];
  updatedAt: Scalars['ISO8601DateTime'];
};

export type InventoryLogPage = {
  __typename?: 'InventoryLogPage';
  hasNextPage: Scalars['Boolean'];
  hasPreviousPage: Scalars['Boolean'];
  nodes: Array<InventoryLog>;
  nodesCount: Scalars['Int'];
  pagesCount: Scalars['Int'];
};


export type LineItem = {
  __typename?: 'LineItem';
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  order: Order;
  price: Scalars['Float'];
  quantity: Scalars['Int'];
  totalCost: Scalars['Float'];
  totalPrice: Scalars['Float'];
  updatedAt: Scalars['ISO8601DateTime'];
  variant: Variant;
};

/** Attributes for lineItem */
export type LineItemInput = {
  price?: Maybe<Scalars['Float']>;
  quantity: Scalars['Int'];
  variantId: Scalars['ID'];
};

export type ManufactureItemInput = {
  _destroy?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  outStoreId?: Maybe<Scalars['ID']>;
  quantity?: Maybe<Scalars['Int']>;
  variantId?: Maybe<Scalars['ID']>;
};

export type ManyfactureItem = {
  __typename?: 'ManyfactureItem';
  id: Scalars['ID'];
  notes?: Maybe<Scalars['String']>;
  quantity: Scalars['Int'];
  variant: Variant;
};

export type Mutation = {
  __typename?: 'Mutation';
  activityCreate?: Maybe<ActivityCreatePayload>;
  activityUpdate?: Maybe<ActivityUpdatePayload>;
  categoryCreate?: Maybe<CategoryCreatePayload>;
  categoryUpdate?: Maybe<CategoryUpdatePayload>;
  chargeCreate?: Maybe<ChargeCreatePayload>;
  dealerCreate?: Maybe<DealerCreatePayload>;
  dealerUpdate?: Maybe<DealerUpdatePayload>;
  directUploadCreate?: Maybe<DirectUploadCreatePayload>;
  expenseCreate?: Maybe<ExpenseCreatePayload>;
  inStoreComplete?: Maybe<InStoreCompletePayload>;
  inStoreCreate?: Maybe<InStoreCreatePayload>;
  inStoreUpdate?: Maybe<InStoreUpdatePayload>;
  inventoryCheckComplete?: Maybe<InventoryCheckCompletePayload>;
  inventoryCheckCreate?: Maybe<InventoryCheckCreatePayload>;
  inventoryCheckDelete?: Maybe<InventoryCheckDeletePayload>;
  inventoryCheckUpdate?: Maybe<InventoryCheckUpdatePayload>;
  inventoryItemUpdateQuantity?: Maybe<InventoryItemUpdateQuantityPayload>;
  orderCancel?: Maybe<OrderCancelPayload>;
  orderCreate?: Maybe<OrderCreatePayload>;
  outStoreComplete?: Maybe<OutStoreCompletePayload>;
  outStoreCreate?: Maybe<OutStoreCreatePayload>;
  outStoreUpdate?: Maybe<OutStoreUpdatePayload>;
  productCreate?: Maybe<ProductCreatePayload>;
  productUpdate?: Maybe<ProductUpdatePayload>;
  shipmentImportShunfengBill?: Maybe<ShipmentImportShunfengBillPayload>;
  shipmentSyncRoutes?: Maybe<ShipmentSyncRoutesPayload>;
  shipmentUpdateCost?: Maybe<ShipmentUpdateCostPayload>;
  shippingAddressCreate?: Maybe<ShippingAddressCreatePayload>;
  shippingAddressSetDefault?: Maybe<ShippingAddressSetDefaultPayload>;
  shippingAddressUpdate?: Maybe<ShippingAddressUpdatePayload>;
  signIn?: Maybe<SignInPayload>;
  slRowApprove?: Maybe<SlRowApprovePayload>;
  slRowReject?: Maybe<SlRowRejectPayload>;
  terminalCreate?: Maybe<TerminalCreatePayload>;
  terminalUpdate?: Maybe<TerminalUpdatePayload>;
  userChangePassword?: Maybe<UserChangePasswordPayload>;
  userCreate?: Maybe<UserCreatePayload>;
  userUpdate?: Maybe<UserUpdatePayload>;
  variantCreate?: Maybe<VariantCreatePayload>;
  variantUpdate?: Maybe<VariantUpdatePayload>;
  workOrderBlender?: Maybe<WorkOrderBlenderPayload>;
  workOrderCreate?: Maybe<WorkOrderCreatePayload>;
};


export type MutationActivityCreateArgs = {
  input: ActivityInput;
};


export type MutationActivityUpdateArgs = {
  input: ActivityInput;
};


export type MutationCategoryCreateArgs = {
  input: CategoryInput;
};


export type MutationCategoryUpdateArgs = {
  input: CategoryInput;
};


export type MutationChargeCreateArgs = {
  input: ChargeInput;
};


export type MutationDealerCreateArgs = {
  input: DealerInput;
};


export type MutationDealerUpdateArgs = {
  input: DealerInput;
};


export type MutationDirectUploadCreateArgs = {
  input: DirectUploadInput;
};


export type MutationExpenseCreateArgs = {
  input: ExpenseInput;
};


export type MutationInStoreCompleteArgs = {
  input: InStoreCompleteInput;
};


export type MutationInStoreCreateArgs = {
  input: InStoreInput;
};


export type MutationInStoreUpdateArgs = {
  input: InStoreInput;
};


export type MutationInventoryCheckCompleteArgs = {
  input: InventoryCheckCompleteInput;
};


export type MutationInventoryCheckCreateArgs = {
  input: InventoryCheckInput;
};


export type MutationInventoryCheckDeleteArgs = {
  input: InventoryCheckDeleteInput;
};


export type MutationInventoryCheckUpdateArgs = {
  input: InventoryCheckInput;
};


export type MutationInventoryItemUpdateQuantityArgs = {
  input: InventoryItemUpdateQuantityInput;
};


export type MutationOrderCancelArgs = {
  input: OrderCancelInput;
};


export type MutationOrderCreateArgs = {
  input: OrderCreateInput;
};


export type MutationOutStoreCompleteArgs = {
  input: OutStoreCompleteInput;
};


export type MutationOutStoreCreateArgs = {
  input: OutStoreInput;
};


export type MutationOutStoreUpdateArgs = {
  input: OutStoreInput;
};


export type MutationProductCreateArgs = {
  input: ProductInput;
};


export type MutationProductUpdateArgs = {
  input: ProductInput;
};


export type MutationShipmentImportShunfengBillArgs = {
  input: ShipmentImportShunfengBillInput;
};


export type MutationShipmentSyncRoutesArgs = {
  input: ShipmentSyncRoutesInput;
};


export type MutationShipmentUpdateCostArgs = {
  input: ShipmentUpdateCostInput;
};


export type MutationShippingAddressCreateArgs = {
  input: ShippingAddressInput;
};


export type MutationShippingAddressSetDefaultArgs = {
  input: ShippingAddressSetDefaultInput;
};


export type MutationShippingAddressUpdateArgs = {
  input: ShippingAddressInput;
};


export type MutationSignInArgs = {
  input: SignInInput;
};


export type MutationSlRowApproveArgs = {
  input: SlRowApproveInput;
};


export type MutationSlRowRejectArgs = {
  input: SlRowRejectInput;
};


export type MutationTerminalCreateArgs = {
  input: TerminalInput;
};


export type MutationTerminalUpdateArgs = {
  input: TerminalInput;
};


export type MutationUserChangePasswordArgs = {
  input: UserChangePasswordInput;
};


export type MutationUserCreateArgs = {
  input: UserInput;
};


export type MutationUserUpdateArgs = {
  input: UserInput;
};


export type MutationVariantCreateArgs = {
  input: VariantInput;
};


export type MutationVariantUpdateArgs = {
  input: VariantInput;
};


export type MutationWorkOrderBlenderArgs = {
  input: WorkOrderBlenderInput;
};


export type MutationWorkOrderCreateArgs = {
  input: WorkOrderCreateInput;
};

export type OfflineReport = {
  __typename?: 'OfflineReport';
  orders: OrderPage;
  totalCost: Scalars['Float'];
  totalExpense: Scalars['Float'];
  totalProfit: Scalars['Float'];
  totalSales: Scalars['Float'];
  totalShipmentCost: Scalars['Float'];
  variantSales: Scalars['JSON'];
};


export type OfflineReportOrdersArgs = {
  page?: Maybe<Scalars['Int']>;
  perPage?: Maybe<Scalars['Int']>;
};

export type OnlineReport = {
  __typename?: 'OnlineReport';
  areaSales: Scalars['JSON'];
  orders: ShopOrderPage;
  totalCost: Scalars['Float'];
  totalExpense: Scalars['Float'];
  totalProfit: Scalars['Float'];
  totalSales: Scalars['Float'];
  totalShipmentCost: Scalars['Float'];
  variantSales: Scalars['JSON'];
};


export type OnlineReportOrdersArgs = {
  page?: Maybe<Scalars['Int']>;
  perPage?: Maybe<Scalars['Int']>;
};

export type Order = {
  __typename?: 'Order';
  charge?: Maybe<Charge>;
  commission: Scalars['Float'];
  commissionRate: Scalars['Float'];
  createdAt: Scalars['ISO8601DateTime'];
  dealer: Dealer;
  discountedAmount: Scalars['Float'];
  id: Scalars['ID'];
  lineItems: Array<LineItem>;
  notes?: Maybe<Scalars['String']>;
  shipment?: Maybe<Shipment>;
  shippingAddress: ShippingAddress;
  state: Scalars['String'];
  totalCost: Scalars['Float'];
  totalPrice: Scalars['Float'];
  totalProfit: Scalars['Float'];
  updatedAt: Scalars['ISO8601DateTime'];
  user: User;
};

/** Autogenerated input type of OrderCancel */
export type OrderCancelInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of OrderCancel */
export type OrderCancelPayload = {
  __typename?: 'OrderCancelPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  order?: Maybe<Order>;
};

/** Autogenerated input type of OrderCreate */
export type OrderCreateInput = {
  /** The charge associated with the order.  */
  chargeId?: Maybe<Scalars['Int']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The dealer associated with the order.  */
  dealerId: Scalars['Int'];
  discountedAmount?: Maybe<Scalars['Float']>;
  /** The line items associated with the order.  */
  lineItems: Array<LineItemInput>;
  notes?: Maybe<Scalars['String']>;
  /** The shipping address associated with the order.  */
  shippingAddress: ShippingAddressInput;
};

/** Autogenerated return type of OrderCreate */
export type OrderCreatePayload = {
  __typename?: 'OrderCreatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  order?: Maybe<Order>;
};

export type OrderPage = {
  __typename?: 'OrderPage';
  hasNextPage: Scalars['Boolean'];
  hasPreviousPage: Scalars['Boolean'];
  nodes: Array<Order>;
  nodesCount: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

export type OutStore = {
  __typename?: 'OutStore';
  id: Scalars['ID'];
  inStore?: Maybe<InStore>;
  manufactureItems: Array<ManyfactureItem>;
  notes?: Maybe<Scalars['String']>;
  outStoreDate: Scalars['ISO8601DateTime'];
  outStoreItems: Array<OutStoreItem>;
  /** pendding, completed */
  state: Scalars['String'];
  user: User;
};

/** Autogenerated input type of OutStoreComplete */
export type OutStoreCompleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
};

/** Autogenerated return type of OutStoreComplete */
export type OutStoreCompletePayload = {
  __typename?: 'OutStoreCompletePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  outStore?: Maybe<OutStore>;
};

/** Autogenerated return type of OutStoreCreate */
export type OutStoreCreatePayload = {
  __typename?: 'OutStoreCreatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  outStore?: Maybe<OutStore>;
};

export type OutStoreInput = {
  id?: Maybe<Scalars['ID']>;
  manufactureItems?: Maybe<Array<ManufactureItemInput>>;
  notes?: Maybe<Scalars['String']>;
  outStoreDate?: Maybe<Scalars['ISO8601DateTime']>;
  outStoreItems?: Maybe<Array<OutStoreItemInput>>;
};

export type OutStoreItem = {
  __typename?: 'OutStoreItem';
  id: Scalars['ID'];
  notes?: Maybe<Scalars['String']>;
  quantity: Scalars['Int'];
  variant: Variant;
};

export type OutStoreItemInput = {
  _destroy?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  outStoreId?: Maybe<Scalars['ID']>;
  quantity?: Maybe<Scalars['Int']>;
  variantId?: Maybe<Scalars['ID']>;
};

export type OutStorePage = {
  __typename?: 'OutStorePage';
  hasNextPage: Scalars['Boolean'];
  hasPreviousPage: Scalars['Boolean'];
  nodes: Array<OutStore>;
  nodesCount: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** Autogenerated return type of OutStoreUpdate */
export type OutStoreUpdatePayload = {
  __typename?: 'OutStoreUpdatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  outStore?: Maybe<OutStore>;
};

export enum OutStoresOrder {
  Id = 'ID',
  Recent = 'RECENT'
}

export type Principal = {
  __typename?: 'Principal';
  age?: Maybe<Scalars['Int']>;
  birthday?: Maybe<Scalars['ISO8601Date']>;
  email?: Maybe<Scalars['String']>;
  hobby?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  phone: Scalars['String'];
  wechat: Scalars['String'];
};

/** Attributes for principal */
export type PrincipalInput = {
  age?: Maybe<Scalars['Int']>;
  birthday?: Maybe<Scalars['ISO8601Date']>;
  email?: Maybe<Scalars['String']>;
  hobby?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  wechat?: Maybe<Scalars['String']>;
};

export type Product = {
  __typename?: 'Product';
  category?: Maybe<Category>;
  createdAt: Scalars['ISO8601DateTime'];
  description?: Maybe<Scalars['String']>;
  enableSaleTax: Scalars['Boolean'];
  id: Scalars['ID'];
  imageUrl?: Maybe<Scalars['String']>;
  inventoryWarningVariants: Array<Variant>;
  leadTime?: Maybe<Scalars['Float']>;
  published: Scalars['Boolean'];
  title: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
  variants: Array<Variant>;
};

/** Autogenerated return type of ProductCreate */
export type ProductCreatePayload = {
  __typename?: 'ProductCreatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  product?: Maybe<Product>;
};

/** Specifies the input fields required to create or update a product. */
export type ProductInput = {
  /** Specifies the product to update or create a new product if absent. */
  categoryId?: Maybe<Scalars['ID']>;
  description?: Maybe<Scalars['String']>;
  enableSaleTax?: Maybe<Scalars['Boolean']>;
  /** Specifies the product to update or create a new product if absent. */
  id?: Maybe<Scalars['ID']>;
  /** Image for product */
  imageUrl?: Maybe<Scalars['String']>;
  leadTime?: Maybe<Scalars['Float']>;
  published?: Maybe<Scalars['Boolean']>;
  /** Required for creating a new product. */
  title?: Maybe<Scalars['String']>;
  variants?: Maybe<Array<VariantInput>>;
};

/** Autogenerated return type of ProductUpdate */
export type ProductUpdatePayload = {
  __typename?: 'ProductUpdatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  product?: Maybe<Product>;
};

export type Query = {
  __typename?: 'Query';
  /** Find all activities */
  activities?: Maybe<Array<Activity>>;
  /** Find a activity */
  activity?: Maybe<Activity>;
  /** Find all advertiser_reports */
  advertiserReports?: Maybe<AdvertiserReportPage>;
  /** Find all advertisers */
  advertisers?: Maybe<Array<Advertiser>>;
  /** Find all advertisers */
  agents?: Maybe<Array<Agent>>;
  /** Get dealers that birthday coming in two weeks */
  birthdayUpcomingDealers?: Maybe<Array<Dealer>>;
  /** Find all categories */
  categories?: Maybe<Array<Category>>;
  /** Find a category */
  category?: Maybe<Category>;
  /** Find all Charges */
  charges?: Maybe<ChargePage>;
  /** Get information about current user */
  currentUser?: Maybe<User>;
  /** Dashboard queries */
  dashboard?: Maybe<Dashboard>;
  /** Find a dealer */
  dealer?: Maybe<Dealer>;
  /** Find all dealers */
  dealers?: Maybe<Array<Dealer>>;
  erpOutStoreItems?: Maybe<Scalars['JSON']>;
  /** Find all Expenses */
  expenses?: Maybe<ExpensePage>;
  /** Find InStore */
  inStore?: Maybe<InStore>;
  /** Find all in_stores */
  inStores?: Maybe<InStorePage>;
  /** Find InventoryCheck */
  inventoryCheck?: Maybe<InventoryCheck>;
  /** Find all inventory_checks */
  inventoryChecks?: Maybe<InventoryCheckPage>;
  /** Get variants that inventory underto the min quantity */
  inventoryWarningVariants?: Maybe<Array<Variant>>;
  /** Find offline report */
  offlineReport?: Maybe<OfflineReport>;
  /** Find online report */
  onlineReport?: Maybe<OnlineReport>;
  onlineSalesRegionDistribution?: Maybe<Scalars['JSON']>;
  /** Find order */
  order?: Maybe<Order>;
  /** Find all orders */
  orders?: Maybe<OrderPage>;
  /** Find OutStore */
  outStore?: Maybe<OutStore>;
  /** Find all out_stores */
  outStores?: Maybe<OutStorePage>;
  /** Find a product */
  product?: Maybe<Product>;
  /** Find all products */
  products?: Maybe<Array<Product>>;
  /** Find all RawProducts */
  rawProducts?: Maybe<Array<RawProduct>>;
  /** Find shop */
  shop?: Maybe<Shop>;
  /** Find shop_order */
  shopOrder?: Maybe<ShopOrder>;
  /** sync shop_order from erp */
  shopOrderSync?: Maybe<Scalars['Boolean']>;
  /** Find all shop_orders */
  shopOrders?: Maybe<ShopOrderPage>;
  /** Find shop_user */
  shopUser?: Maybe<ShopUser>;
  /** Find all shop_users */
  shopUsers?: Maybe<ShopUserPage>;
  /** Find all shops */
  shops?: Maybe<Array<Shop>>;
  /** Find all Storages */
  storages?: Maybe<Array<Storage>>;
  /** Find all Tags */
  tags?: Maybe<TagPage>;
  /** Find a Terminal */
  terminal?: Maybe<Terminal>;
  /** Find all terminal */
  terminals?: Maybe<Array<Terminal>>;
  /** Find all users */
  users?: Maybe<Array<User>>;
  /** Find variant */
  variant?: Maybe<Variant>;
  /** Find all variants */
  variants?: Maybe<VariantPage>;
  /** Find all WorkOrders */
  workOrders?: Maybe<Array<WorkOrder>>;
};


export type QueryActivityArgs = {
  id: Scalars['ID'];
};


export type QueryAdvertiserReportsArgs = {
  channel?: Maybe<AdvertiserReportChannel>;
  page?: Maybe<Scalars['Int']>;
  perPage?: Maybe<Scalars['Int']>;
};


export type QueryCategoryArgs = {
  id: Scalars['ID'];
};


export type QueryChargesArgs = {
  page?: Maybe<Scalars['Int']>;
  perPage?: Maybe<Scalars['Int']>;
};


export type QueryDealerArgs = {
  id: Scalars['ID'];
};


export type QueryDealersArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type QueryErpOutStoreItemsArgs = {
  outStoreDate: Scalars['ISO8601DateTime'];
};


export type QueryExpensesArgs = {
  expensable?: Maybe<ExpensableEnum>;
  expensableId?: Maybe<Scalars['ID']>;
  page?: Maybe<Scalars['Int']>;
  perPage?: Maybe<Scalars['Int']>;
};


export type QueryInStoreArgs = {
  id: Scalars['ID'];
};


export type QueryInStoresArgs = {
  dateRange?: Maybe<Array<Scalars['ISO8601DateTime']>>;
  manufacture?: Maybe<Scalars['Boolean']>;
  order?: Maybe<InStoresOrder>;
  page?: Maybe<Scalars['Int']>;
  perPage?: Maybe<Scalars['Int']>;
  type?: Maybe<InStoreType>;
};


export type QueryInventoryCheckArgs = {
  id: Scalars['ID'];
};


export type QueryInventoryChecksArgs = {
  page?: Maybe<Scalars['Int']>;
  perPage?: Maybe<Scalars['Int']>;
};


export type QueryOfflineReportArgs = {
  endTime: Scalars['ISO8601DateTime'];
  startTime: Scalars['ISO8601DateTime'];
};


export type QueryOnlineReportArgs = {
  endTime: Scalars['ISO8601DateTime'];
  startTime: Scalars['ISO8601DateTime'];
};


export type QueryOrderArgs = {
  id: Scalars['ID'];
};


export type QueryOrdersArgs = {
  page?: Maybe<Scalars['Int']>;
  perPage?: Maybe<Scalars['Int']>;
  trackingNumbers?: Maybe<Array<Scalars['String']>>;
};


export type QueryOutStoreArgs = {
  id: Scalars['ID'];
};


export type QueryOutStoresArgs = {
  dateRange?: Maybe<Array<Scalars['ISO8601DateTime']>>;
  manufacture?: Maybe<Scalars['Boolean']>;
  order?: Maybe<OutStoresOrder>;
  page?: Maybe<Scalars['Int']>;
  perPage?: Maybe<Scalars['Int']>;
};


export type QueryProductArgs = {
  id: Scalars['ID'];
};


export type QueryProductsArgs = {
  published?: Maybe<Scalars['Boolean']>;
  withCategory?: Maybe<Scalars['ID']>;
  withInventoryWarning?: Maybe<Scalars['Boolean']>;
};


export type QueryShopArgs = {
  id: Scalars['ID'];
};


export type QueryShopOrderArgs = {
  id: Scalars['ID'];
};


export type QueryShopOrdersArgs = {
  page?: Maybe<Scalars['Int']>;
  perPage?: Maybe<Scalars['Int']>;
  shopId?: Maybe<Scalars['ID']>;
  shopUserId?: Maybe<Scalars['ID']>;
};


export type QueryShopUserArgs = {
  id: Scalars['ID'];
};


export type QueryShopUsersArgs = {
  order?: Maybe<ShopUsersOrder>;
  page?: Maybe<Scalars['Int']>;
  perPage?: Maybe<Scalars['Int']>;
  phone?: Maybe<Scalars['String']>;
};


export type QueryShopsArgs = {
  first?: Maybe<Scalars['Int']>;
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type QueryTagsArgs = {
  page?: Maybe<Scalars['Int']>;
  perPage?: Maybe<Scalars['Int']>;
};


export type QueryTerminalArgs = {
  id: Scalars['ID'];
};


export type QueryUsersArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type QueryVariantArgs = {
  id: Scalars['ID'];
};


export type QueryVariantsArgs = {
  byCategory?: Maybe<Scalars['ID']>;
  ids?: Maybe<Array<Scalars['ID']>>;
  overInventory?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  perPage?: Maybe<Scalars['Int']>;
  tags?: Maybe<Array<Scalars['String']>>;
  title?: Maybe<Scalars['String']>;
};

export type RawProduct = {
  __typename?: 'RawProduct';
  degree: Scalars['Float'];
  id: Scalars['ID'];
  name: Scalars['String'];
  recipe: Scalars['JSON'];
  stock: Scalars['Float'];
};

export type Shipment = {
  __typename?: 'Shipment';
  cost: Scalars['Float'];
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  providerName: Scalars['String'];
  routes?: Maybe<Scalars['JSON']>;
  trackingNumber: Scalars['String'];
};

/** Autogenerated input type of ShipmentImportShunfengBill */
export type ShipmentImportShunfengBillInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Shunfeng billing file */
  file: Scalars['Upload'];
};

/** Autogenerated return type of ShipmentImportShunfengBill */
export type ShipmentImportShunfengBillPayload = {
  __typename?: 'ShipmentImportShunfengBillPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  total: Scalars['Float'];
};

/** Autogenerated input type of ShipmentSyncRoutes */
export type ShipmentSyncRoutesInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Shipment id */
  id?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of ShipmentSyncRoutes */
export type ShipmentSyncRoutesPayload = {
  __typename?: 'ShipmentSyncRoutesPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  shipment?: Maybe<Shipment>;
};

/** Autogenerated input type of ShipmentUpdateCost */
export type ShipmentUpdateCostInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Shipment cost */
  cost: Scalars['Float'];
  /** Shipment id */
  id: Scalars['String'];
};

/** Autogenerated return type of ShipmentUpdateCost */
export type ShipmentUpdateCostPayload = {
  __typename?: 'ShipmentUpdateCostPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  shipment?: Maybe<Shipment>;
};

export type ShippingAddress = {
  __typename?: 'ShippingAddress';
  city: Scalars['String'];
  detail: Scalars['String'];
  district: Scalars['String'];
  id: Scalars['ID'];
  isDefault: Scalars['Boolean'];
  name: Scalars['String'];
  phone: Scalars['String'];
  province: Scalars['String'];
};

/** Autogenerated return type of ShippingAddressCreate */
export type ShippingAddressCreatePayload = {
  __typename?: 'ShippingAddressCreatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  shippingAddress?: Maybe<ShippingAddress>;
};

/** Attributes for shipping address */
export type ShippingAddressInput = {
  city?: Maybe<Scalars['String']>;
  dealerId?: Maybe<Scalars['ID']>;
  detail?: Maybe<Scalars['String']>;
  district?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of ShippingAddressSetDefault */
export type ShippingAddressSetDefaultInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  dealerId?: Maybe<Scalars['ID']>;
  id?: Maybe<Scalars['ID']>;
};

/** Autogenerated return type of ShippingAddressSetDefault */
export type ShippingAddressSetDefaultPayload = {
  __typename?: 'ShippingAddressSetDefaultPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  shippingAddress?: Maybe<ShippingAddress>;
};

/** Autogenerated return type of ShippingAddressUpdate */
export type ShippingAddressUpdatePayload = {
  __typename?: 'ShippingAddressUpdatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  shippingAddress?: Maybe<ShippingAddress>;
};

export type Shop = {
  __typename?: 'Shop';
  dailySales: Scalars['JSON'];
  expenses: Array<Expense>;
  id: Scalars['ID'];
  monthlySales: Scalars['JSON'];
  name: Scalars['String'];
  orders?: Maybe<Array<ShopOrder>>;
  totalExpenses: Scalars['Float'];
  totalSales: Scalars['Float'];
  weeklySales: Scalars['JSON'];
};

export type ShopLineItem = {
  __typename?: 'ShopLineItem';
  amount: Scalars['Float'];
  id: Scalars['ID'];
  isGift?: Maybe<Scalars['Boolean']>;
  name: Scalars['String'];
  price: Scalars['Float'];
  qty: Scalars['Int'];
  skuId: Scalars['String'];
};

export type ShopOrder = {
  __typename?: 'ShopOrder';
  agent?: Maybe<Agent>;
  freeAmount?: Maybe<Scalars['Float']>;
  freight: Scalars['Float'];
  id: Scalars['ID'];
  lId: Scalars['String'];
  lineItems: Array<ShopLineItem>;
  logisticsCompany?: Maybe<Scalars['String']>;
  orderDate: Scalars['ISO8601DateTime'];
  paidAmount: Scalars['Float'];
  payAmount: Scalars['Float'];
  payDate: Scalars['ISO8601DateTime'];
  receiverAddress?: Maybe<Scalars['String']>;
  receiverCity?: Maybe<Scalars['String']>;
  receiverDistrict?: Maybe<Scalars['String']>;
  receiverMobile?: Maybe<Scalars['String']>;
  receiverName?: Maybe<Scalars['String']>;
  receiverState?: Maybe<Scalars['String']>;
  shop: Shop;
  shopBuyerId?: Maybe<Scalars['String']>;
  shopName: Scalars['String'];
  shopUser?: Maybe<ShopUser>;
  soId: Scalars['String'];
  totalCost: Scalars['Float'];
  totalProfit: Scalars['Float'];
};

export type ShopOrderPage = {
  __typename?: 'ShopOrderPage';
  hasNextPage: Scalars['Boolean'];
  hasPreviousPage: Scalars['Boolean'];
  nodes: Array<ShopOrder>;
  nodesCount: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

export type ShopUser = {
  __typename?: 'ShopUser';
  city: Scalars['String'];
  detail: Scalars['String'];
  district: Scalars['String'];
  id: Scalars['ID'];
  lastOrderDate?: Maybe<Scalars['ISO8601DateTime']>;
  name: Scalars['String'];
  orders?: Maybe<Array<ShopOrder>>;
  ordersCount: Scalars['Int'];
  phone: Scalars['String'];
  province: Scalars['String'];
  totalAmount: Scalars['Float'];
};

export type ShopUserPage = {
  __typename?: 'ShopUserPage';
  hasNextPage: Scalars['Boolean'];
  hasPreviousPage: Scalars['Boolean'];
  nodes: Array<ShopUser>;
  nodesCount: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

export enum ShopUsersOrder {
  OrdersCount = 'ORDERS_COUNT',
  Recent = 'RECENT',
  TotalAmount = 'TOTAL_AMOUNT'
}

/** Autogenerated input type of SignIn */
export type SignInInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  password: Scalars['String'];
  phone: Scalars['String'];
};

/** Autogenerated return type of SignIn */
export type SignInPayload = {
  __typename?: 'SignInPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  token?: Maybe<Scalars['String']>;
  user?: Maybe<User>;
};

export type SlColumn = {
  __typename?: 'SlColumn';
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  label?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  options: Scalars['JSON'];
  placeholder?: Maybe<Scalars['String']>;
  position: Scalars['Int'];
  privateType: SlColumnPrivateType;
  publicType: Scalars['String'];
  rules: Scalars['JSON'];
  updatedAt: Scalars['ISO8601DateTime'];
};

export type SlColumnInput = {
  _destroy?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  label?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  options?: Maybe<Scalars['JSON']>;
  placeholder?: Maybe<Scalars['String']>;
  position?: Maybe<Scalars['Int']>;
  privateType?: Maybe<SlColumnPrivateType>;
  publicType?: Maybe<Scalars['String']>;
  rules?: Maybe<Scalars['JSON']>;
};

export enum SlColumnPrivateType {
  Boolean = 'boolean',
  Date = 'date',
  Daterange = 'daterange',
  Datetime = 'datetime',
  Decimal = 'decimal',
  Float = 'float',
  Inet = 'inet',
  Int4range = 'int4range',
  Int8range = 'int8range',
  Integer = 'integer',
  Json = 'json',
  Jsonb = 'jsonb',
  Money = 'money',
  Numrange = 'numrange',
  Point = 'point',
  String = 'string',
  StringArray = 'string_array',
  Text = 'text',
  Time = 'time',
  Tsrange = 'tsrange',
  Tstzrange = 'tstzrange',
  Uuid = 'uuid'
}

export type SlRow = {
  __typename?: 'SlRow';
  createdAt: Scalars['ISO8601DateTime'];
  data: Scalars['JSON'];
  id: Scalars['ID'];
  /** pendding, approved, rejected */
  state: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
  wechatUser?: Maybe<WechatUser>;
};

/** Autogenerated input type of SlRowApprove */
export type SlRowApproveInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  slRowId: Scalars['ID'];
};

/** Autogenerated return type of SlRowApprove */
export type SlRowApprovePayload = {
  __typename?: 'SlRowApprovePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  slRow?: Maybe<SlRow>;
};

/** Autogenerated input type of SlRowReject */
export type SlRowRejectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  slRowId: Scalars['ID'];
};

/** Autogenerated return type of SlRowReject */
export type SlRowRejectPayload = {
  __typename?: 'SlRowRejectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  slRow?: Maybe<SlRow>;
};

export type SlTable = {
  __typename?: 'SlTable';
  createdAt: Scalars['ISO8601DateTime'];
  desc: Scalars['String'];
  id: Scalars['ID'];
  name: Scalars['String'];
  slColumns?: Maybe<Array<SlColumn>>;
  slRows?: Maybe<Array<SlRow>>;
  updatedAt: Scalars['ISO8601DateTime'];
};

export type SlTableInput = {
  activityId?: Maybe<Scalars['ID']>;
  desc?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  slColumns?: Maybe<Array<SlColumnInput>>;
};

export type Storage = {
  __typename?: 'Storage';
  degree: Scalars['Float'];
  id: Scalars['ID'];
  name: Scalars['String'];
  price: Scalars['Float'];
  stock: Scalars['Float'];
  volume: Scalars['Float'];
};

export type Tag = {
  __typename?: 'Tag';
  id: Scalars['ID'];
  name: Scalars['String'];
  taggingsCount: Scalars['Int'];
};

export type TagPage = {
  __typename?: 'TagPage';
  hasNextPage: Scalars['Boolean'];
  hasPreviousPage: Scalars['Boolean'];
  nodes: Array<Tag>;
  nodesCount: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

export type Terminal = {
  __typename?: 'Terminal';
  address: Address;
  contact: Scalars['String'];
  dealer: Dealer;
  id: Scalars['ID'];
  name: Scalars['String'];
  phone: Scalars['String'];
  terminalType: Scalars['String'];
};

/** Autogenerated return type of TerminalCreate */
export type TerminalCreatePayload = {
  __typename?: 'TerminalCreatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  terminal?: Maybe<Terminal>;
};

/** Specifies the input fields required to create or update a terminal. */
export type TerminalInput = {
  /** The address associated with the terminal.  */
  address?: Maybe<AddressInput>;
  /** Required for creating a new terminal. */
  contact?: Maybe<Scalars['String']>;
  /** The dealer associated with the terminal. */
  dealerId?: Maybe<Scalars['ID']>;
  /** Specifies the terminal to update or create a new terminal if absent. */
  id?: Maybe<Scalars['ID']>;
  /** Required for creating a new terminal. */
  name?: Maybe<Scalars['String']>;
  /** Required for creating a new terminal. */
  phone?: Maybe<Scalars['String']>;
  /** Required for creating a new terminal. */
  terminalType?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of TerminalUpdate */
export type TerminalUpdatePayload = {
  __typename?: 'TerminalUpdatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  terminal?: Maybe<Terminal>;
};

/** 时间粒度 */
export enum TimeGranularity {
  /** 表示天 */
  StatTimeGranularityDaily = 'STAT_TIME_GRANULARITY_DAILY',
  /** 表示小时 */
  StatTimeGranularityHourly = 'STAT_TIME_GRANULARITY_HOURLY'
}


export type User = {
  __typename?: 'User';
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  locked: Scalars['Boolean'];
  name: Scalars['String'];
  phone: Scalars['String'];
  roles?: Maybe<Array<Scalars['String']>>;
};

/** Autogenerated input type of UserChangePassword */
export type UserChangePasswordInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  password: Scalars['String'];
};

/** Autogenerated return type of UserChangePassword */
export type UserChangePasswordPayload = {
  __typename?: 'UserChangePasswordPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  user?: Maybe<User>;
};

/** Autogenerated return type of UserCreate */
export type UserCreatePayload = {
  __typename?: 'UserCreatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  user?: Maybe<User>;
};

/** Specifies the input fields required to create or update a user. */
export type UserInput = {
  /** Specifies the user to update or create a new user if absent. */
  id?: Maybe<Scalars['ID']>;
  /** set true to block user */
  locked?: Maybe<Scalars['Boolean']>;
  /** Required for creating a new product. */
  name?: Maybe<Scalars['String']>;
  /** Required for creating a new user. */
  password?: Maybe<Scalars['String']>;
  /** Required for creating a new user. */
  phone?: Maybe<Scalars['String']>;
  /** admin,opration,sales */
  roles?: Maybe<Array<Scalars['String']>>;
};

/** Autogenerated return type of UserUpdate */
export type UserUpdatePayload = {
  __typename?: 'UserUpdatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  user?: Maybe<User>;
};

export type ValidationErrors = {
  __typename?: 'ValidationErrors';
  details: Scalars['String'];
  fullMessages: Array<Scalars['String']>;
};

export type Variant = {
  __typename?: 'Variant';
  barcode?: Maybe<Scalars['String']>;
  closingInventory: Scalars['Int'];
  compareAtPrice: Scalars['Float'];
  costPrice: Scalars['Float'];
  createdAt: Scalars['ISO8601DateTime'];
  displayTitle: Scalars['String'];
  erpcode?: Maybe<Scalars['String']>;
  hierarchies?: Maybe<Array<Hierarchy>>;
  id: Scalars['ID'];
  imageUrl?: Maybe<Scalars['String']>;
  instoreInventory: Scalars['Int'];
  inventoryLogs?: Maybe<InventoryLogPage>;
  inventoryLogsCount: Scalars['Int'];
  inventoryQuantity: Scalars['Int'];
  leadTime?: Maybe<Scalars['Float']>;
  minInventoryQuantity: Scalars['Int'];
  openingInventory: Scalars['Int'];
  originCostPrice: Scalars['Float'];
  outstoreInventory: Scalars['Int'];
  position: Scalars['Int'];
  price: Scalars['Float'];
  productCategoryId: Scalars['ID'];
  productId: Scalars['ID'];
  saleTax: Scalars['Float'];
  tagList?: Maybe<Array<Scalars['String']>>;
  title: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
  weight?: Maybe<Scalars['Float']>;
  yuanqiPrice: Scalars['Float'];
};


export type VariantClosingInventoryArgs = {
  endTime: Scalars['ISO8601DateTime'];
  startTime: Scalars['ISO8601DateTime'];
};


export type VariantInstoreInventoryArgs = {
  endTime: Scalars['ISO8601DateTime'];
  startTime: Scalars['ISO8601DateTime'];
};


export type VariantInventoryLogsArgs = {
  page?: Maybe<Scalars['Int']>;
  perPage?: Maybe<Scalars['Int']>;
};


export type VariantOpeningInventoryArgs = {
  endTime: Scalars['ISO8601DateTime'];
  startTime: Scalars['ISO8601DateTime'];
};


export type VariantOutstoreInventoryArgs = {
  endTime: Scalars['ISO8601DateTime'];
  startTime: Scalars['ISO8601DateTime'];
};

/** Autogenerated return type of VariantCreate */
export type VariantCreatePayload = {
  __typename?: 'VariantCreatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  variant?: Maybe<Variant>;
};

/** Attributes for variant. */
export type VariantInput = {
  barcode?: Maybe<Scalars['String']>;
  compareAtPrice?: Maybe<Scalars['Float']>;
  costPrice?: Maybe<Scalars['Float']>;
  erpcode?: Maybe<Scalars['String']>;
  hierarchies?: Maybe<Array<HierarchyInput>>;
  id?: Maybe<Scalars['ID']>;
  imageUrl?: Maybe<Scalars['String']>;
  inventoryQuantity?: Maybe<Scalars['Int']>;
  leadTime?: Maybe<Scalars['Float']>;
  minInventoryQuantity?: Maybe<Scalars['Int']>;
  originCostPrice?: Maybe<Scalars['Float']>;
  position?: Maybe<Scalars['Int']>;
  price?: Maybe<Scalars['Float']>;
  productId?: Maybe<Scalars['ID']>;
  /** "north, east, south, west" */
  tagList?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['Float']>;
  yuanqiPrice?: Maybe<Scalars['Float']>;
};

export type VariantPage = {
  __typename?: 'VariantPage';
  hasNextPage: Scalars['Boolean'];
  hasPreviousPage: Scalars['Boolean'];
  nodes: Array<Variant>;
  nodesCount: Scalars['Int'];
  pagesCount: Scalars['Int'];
};

/** Autogenerated return type of VariantUpdate */
export type VariantUpdatePayload = {
  __typename?: 'VariantUpdatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  variant?: Maybe<Variant>;
};

export type WechatUser = {
  __typename?: 'WechatUser';
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  headimgurl: Scalars['String'];
  id: Scalars['ID'];
  nickname: Scalars['String'];
  openid: Scalars['String'];
  province?: Maybe<Scalars['String']>;
  sex: Scalars['String'];
  subscribe: Scalars['Boolean'];
  subscribeTime?: Maybe<Scalars['ISO8601DateTime']>;
};

export type WorkOrder = {
  __typename?: 'WorkOrder';
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  rawProduct: RawProduct;
  recipe?: Maybe<Scalars['JSON']>;
  weight?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of WorkOrderBlender */
export type WorkOrderBlenderInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  rawProductId: Scalars['ID'];
  weight: Scalars['Float'];
};

/** Autogenerated return type of WorkOrderBlender */
export type WorkOrderBlenderPayload = {
  __typename?: 'WorkOrderBlenderPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  rawProduct?: Maybe<RawProduct>;
  result?: Maybe<Scalars['JSON']>;
  weight?: Maybe<Scalars['Float']>;
};

/** Autogenerated input type of WorkOrderCreate */
export type WorkOrderCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  rawProductId: Scalars['ID'];
  weight: Scalars['Float'];
};

/** Autogenerated return type of WorkOrderCreate */
export type WorkOrderCreatePayload = {
  __typename?: 'WorkOrderCreatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<ValidationErrors>;
  workOrder?: Maybe<WorkOrder>;
};

/**
 * The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.
 *
 * Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByUrl`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
 */
export type __Type = {
  __typename?: '__Type';
  kind: __TypeKind;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  specifiedByUrl?: Maybe<Scalars['String']>;
  fields?: Maybe<Array<__Field>>;
  interfaces?: Maybe<Array<__Type>>;
  possibleTypes?: Maybe<Array<__Type>>;
  enumValues?: Maybe<Array<__EnumValue>>;
  inputFields?: Maybe<Array<__InputValue>>;
  ofType?: Maybe<__Type>;
};


/**
 * The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.
 *
 * Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByUrl`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
 */
export type __TypeFieldsArgs = {
  includeDeprecated?: Maybe<Scalars['Boolean']>;
};


/**
 * The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.
 *
 * Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByUrl`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
 */
export type __TypeEnumValuesArgs = {
  includeDeprecated?: Maybe<Scalars['Boolean']>;
};


/**
 * The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.
 *
 * Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByUrl`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
 */
export type __TypeInputFieldsArgs = {
  includeDeprecated?: Maybe<Scalars['Boolean']>;
};

/** An enum describing what kind of type a given `__Type` is. */
export enum __TypeKind {
  /** Indicates this type is a scalar. */
  Scalar = 'SCALAR',
  /** Indicates this type is an object. `fields` and `interfaces` are valid fields. */
  Object = 'OBJECT',
  /** Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields. */
  Interface = 'INTERFACE',
  /** Indicates this type is a union. `possibleTypes` is a valid field. */
  Union = 'UNION',
  /** Indicates this type is an enum. `enumValues` is a valid field. */
  Enum = 'ENUM',
  /** Indicates this type is an input object. `inputFields` is a valid field. */
  InputObject = 'INPUT_OBJECT',
  /** Indicates this type is a list. `ofType` is a valid field. */
  List = 'LIST',
  /** Indicates this type is a non-null. `ofType` is a valid field. */
  NonNull = 'NON_NULL'
}

/** Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type. */
export type __Field = {
  __typename?: '__Field';
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  args: Array<__InputValue>;
  type: __Type;
  isDeprecated: Scalars['Boolean'];
  deprecationReason?: Maybe<Scalars['String']>;
};


/** Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type. */
export type __FieldArgsArgs = {
  includeDeprecated?: Maybe<Scalars['Boolean']>;
};

/** Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value. */
export type __InputValue = {
  __typename?: '__InputValue';
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  type: __Type;
  /** A GraphQL-formatted string representing the default value for this input value. */
  defaultValue?: Maybe<Scalars['String']>;
  isDeprecated: Scalars['Boolean'];
  deprecationReason?: Maybe<Scalars['String']>;
};

/** One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string. */
export type __EnumValue = {
  __typename?: '__EnumValue';
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  isDeprecated: Scalars['Boolean'];
  deprecationReason?: Maybe<Scalars['String']>;
};
